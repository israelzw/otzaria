// Mocks generated by Mockito 5.4.4 from annotations
// in otzaria_project_2/test/text_book/editing/bloc/text_book_bloc_editor_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:otzaria/text_book/text_book_repository.dart' as _i2;
import 'package:otzaria/text_book/editing/repository/overrides_repository.dart'
    as _i3;
import 'package:otzaria/text_book/editing/services/overrides_rebase_service.dart'
    as _i5;
import 'package:otzaria/text_book/editing/models/text_override.dart' as _i6;

import 'package:otzaria/text_book/editing/models/text_draft.dart' as _i8;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [TextBookRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockTextBookRepository extends _i1.Mock
    implements _i2.TextBookRepository {
  MockTextBookRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<bool> bookExists(String title) => (super.noSuchMethod(
        Invocation.method(
          #bookExists,
          [title],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);
}

/// A class which mocks [OverridesRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockOverridesRepository extends _i1.Mock
    implements _i3.OverridesRepository {
  MockOverridesRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i6.TextOverride?> readOverride(String bookId, String sectionId) =>
      (super.noSuchMethod(
        Invocation.method(
          #readOverride,
          [bookId, sectionId],
        ),
        returnValue: _i4.Future<_i6.TextOverride?>.value(),
      ) as _i4.Future<_i6.TextOverride?>);

  @override
  _i4.Future<void> writeOverride(String bookId, String sectionId,
          String markdown, String sourceHash) =>
      (super.noSuchMethod(
        Invocation.method(
          #writeOverride,
          [bookId, sectionId, markdown, sourceHash],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> deleteOverride(String bookId, String sectionId) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteOverride,
          [bookId, sectionId],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<_i8.TextDraft?> readDraft(String bookId, String sectionId) =>
      (super.noSuchMethod(
        Invocation.method(
          #readDraft,
          [bookId, sectionId],
        ),
        returnValue: _i4.Future<_i8.TextDraft?>.value(),
      ) as _i4.Future<_i8.TextDraft?>);

  @override
  _i4.Future<void> writeDraft(
          String bookId, String sectionId, String markdown) =>
      (super.noSuchMethod(
        Invocation.method(
          #writeDraft,
          [bookId, sectionId, markdown],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> deleteDraft(String bookId, String sectionId) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteDraft,
          [bookId, sectionId],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<bool> hasLinksFile(String bookId) => (super.noSuchMethod(
        Invocation.method(
          #hasLinksFile,
          [bookId],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<bool> hasNewerDraftThanOverride(String bookId, String sectionId) =>
      (super.noSuchMethod(
        Invocation.method(
          #hasNewerDraftThanOverride,
          [bookId, sectionId],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<List<String>> listOverrides(String bookId) => (super.noSuchMethod(
        Invocation.method(
          #listOverrides,
          [bookId],
        ),
        returnValue: _i4.Future<List<String>>.value(<String>[]),
      ) as _i4.Future<List<String>>);

  @override
  _i4.Future<List<String>> listDrafts(String bookId) => (super.noSuchMethod(
        Invocation.method(
          #listDrafts,
          [bookId],
        ),
        returnValue: _i4.Future<List<String>>.value(<String>[]),
      ) as _i4.Future<List<String>>);

  @override
  _i4.Future<void> cleanupOldDrafts() => (super.noSuchMethod(
        Invocation.method(
          #cleanupOldDrafts,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<double> getTotalDraftsSizeMB() => (super.noSuchMethod(
        Invocation.method(
          #getTotalDraftsSizeMB,
          [],
        ),
        returnValue: _i4.Future<double>.value(0.0),
      ) as _i4.Future<double>);
}

/// A class which mocks [OverridesRebaseService].
///
/// See the documentation for Mockito's code generation for more information.
class MockOverridesRebaseService extends _i1.Mock
    implements _i5.OverridesRebaseService {
  MockOverridesRebaseService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i5.RebaseOutcome> rebaseOverride(
    _i6.TextOverride? override,
    String? newSourceContent,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #rebaseOverride,
          [
            override,
            newSourceContent,
          ],
        ),
        returnValue:
            _i4.Future<_i5.RebaseOutcome>.value(_i5.RebaseOutcome.success),
      ) as _i4.Future<_i5.RebaseOutcome>);
}
